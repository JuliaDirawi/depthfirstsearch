
import java.util.*;

public class Graph {
    private int V; // number of vertices
    private LinkedList<Integer>[] adjList; // adjacency list representation

    public Graph(int V) {
        this.V = V;
        adjList = new LinkedList[V];
        for (int i = 0; i < V; i++) {
            adjList[i] = new LinkedList<Integer>();
        }
    }

    public void addEdge(int v, int w) {
        adjList[v].add(w);
        adjList[w].add(v);
    }

    public LinkedList<Integer>[] getAdjList() {
        return adjList;
    }

    public static void dfs(LinkedList<Integer>[] adjList, boolean[] visited, int vertex) {
        Stack<Integer> stack = new Stack<Integer>();
        stack.push(vertex);
        visited[vertex] = true;
        while (!stack.isEmpty()) {

            int curr = stack.peek();
            int unvisited = getAdjUnvisitedVertex(adjList, visited, curr);

            if (unvisited != -1) {
                stack.push(unvisited);
                visited[unvisited] = true;
                System.out.println(unvisited);

            } else {
                stack.pop();
            }
        }
    }

    public static int getAdjUnvisitedVertex(LinkedList<Integer>[] adjList, boolean[] visited, int vertex) {

        Iterator<Integer> iterator = adjList[vertex].listIterator();
        while (iterator.hasNext()) {

            int adjacent = iterator.next();
            if (!visited[adjacent]) {
                return adjacent;
            }
        }
        return -1;
    }

    public int getV() {
        return V;
    }

    public static void main(String[] args) {
        Graph graph = new Graph(9);
        graph.addEdge(0, 1);
        graph.addEdge(0, 4);
        graph.addEdge(1, 2);
        graph.addEdge(1, 3);
        graph.addEdge(1, 4);
        graph.addEdge(2, 3);
        graph.addEdge(2, 4);
        graph.addEdge(2, 5);
        graph.addEdge(3, 5);
        graph.addEdge(4, 5);
        graph.addEdge(5, 6);
        graph.addEdge(6, 7);
        graph.addEdge(6, 8);
        graph.addEdge(7, 8);
        boolean[] visited = new boolean[graph.getV()];
        dfs(graph.getAdjList(), visited, 0);

    }
}
